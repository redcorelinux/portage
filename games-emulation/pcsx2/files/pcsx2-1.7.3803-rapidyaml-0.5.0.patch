Quick fix for >=0.5.0 (breaks <0.5.0)

Upstream seem to have no intention to acknowledge this as an issue
until they bump their bundled copy of rapidyaml:
https://github.com/PCSX2/pcsx2/issues/7623#issuecomment-1357048378
--- a/pcsx2/GameDatabase.cpp
+++ b/pcsx2/GameDatabase.cpp
@@ -176,5 +176,5 @@
 	if (node.has_child("gameFixes") && node["gameFixes"].has_children())
 	{
-		for (const ryml::NodeRef& n : node["gameFixes"].children())
+		for (const ryml::ConstNodeRef& n : node["gameFixes"].children())
 		{
 			bool fixValidated = false;
@@ -207,5 +207,5 @@
 	if (node.has_child("speedHacks") && node["speedHacks"].has_children())
 	{
-		for (const ryml::NodeRef& n : node["speedHacks"].children())
+		for (const ryml::ConstNodeRef& n : node["speedHacks"].children())
 		{
 			bool speedHackValidated = false;
@@ -237,5 +237,5 @@
 	if (node.has_child("gsHWFixes"))
 	{
-		for (const ryml::NodeRef& n : node["gsHWFixes"].children())
+		for (const ryml::ConstNodeRef& n : node["gsHWFixes"].children())
 		{
 			const std::string_view id_name(n.key().data(), n.key().size());
@@ -258,5 +258,5 @@
 	if (node.has_child("memcardFilters") && node["memcardFilters"].has_children())
 	{
-		for (const ryml::NodeRef& n : node["memcardFilters"].children())
+		for (const ryml::ConstNodeRef& n : node["memcardFilters"].children())
 		{
 			auto memcardFilter = std::string(n.val().str, n.val().len);
@@ -268,5 +268,5 @@
 	if (node.has_child("patches") && node["patches"].has_children())
 	{
-		for (const ryml::NodeRef& n : node["patches"].children())
+		for (const ryml::ConstNodeRef& n : node["patches"].children())
 		{
 			// use a crc of 0 for default patches
@@ -293,5 +293,5 @@
 	if (node.has_child("dynaPatches") && node["dynaPatches"].has_children())
 	{
-		for (const ryml::NodeRef& n : node["dynaPatches"].children())
+		for (const ryml::ConstNodeRef& n : node["dynaPatches"].children())
 		{
 			DynamicPatch patch;
@@ -299,5 +299,5 @@
 			if (n.has_child("pattern") && n["pattern"].has_children())
 			{
-				for (const ryml::NodeRef& db_pattern : n["pattern"].children())
+				for (const ryml::ConstNodeRef& db_pattern : n["pattern"].children())
 				{
 					DynamicPatchEntry entry;
@@ -307,5 +307,5 @@
 					patch.pattern.push_back(entry);
 				}
-				for (const ryml::NodeRef& db_replacement : n["replacement"].children())
+				for (const ryml::ConstNodeRef& db_replacement : n["replacement"].children())
 				{
 					DynamicPatchEntry entry;
